<configuration>
<!--    <contextListener class="com.alin.logback.LoggerStartupListener"/>-->
    <!-- 控制台打印 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${job} ${ip} ${host} [%thread] %-5level %logger{60} - %msg%n</pattern>-->
            <pattern>%msg%n</pattern>
        </encoder>
    </appender>


    <!--kafka appender-->
    <!-- This example configuration is probably most unreliable under
   failure conditions but wont block your application at all -->
    <appender name="kafkaAppender" class="com.github.danielwegener.logback.kafka.KafkaAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${job} ${ip} ${host} [%thread] %-5level %logger{60} - %msg%n</pattern>-->
<!--            <pattern>%msg%n</pattern>-->
        </encoder>
        <!---->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>INFO</level>-->
<!--            <onMatch>DENY</onMatch>-->
<!--            <onMismatch>ACCEPT</onMismatch>-->
<!--        </filter>-->
        <topic>byf2345</topic>
        <!-- we don't care how the log messages will be partitioned  -->
        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy" />

        <!-- use async delivery. the application threads are not blocked by logging -->
        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy" />

        <!-- each <producerConfig> translates to regular kafka-client config (format: key=value) -->
        <!-- producer configs are documented here: https://kafka.apache.org/documentation.html#newproducerconfigs -->
        <!-- bootstrap.servers is the only mandatory producerConfig -->
        <!--<producerConfig>bootstrap.servers=alert-kfk-c1-node001.a.2345inc.com:9092,alert-kfk-c1-node002.a.2345inc.com:9092,alert-kfk-c1-node003.a.2345inc.com:9092</producerConfig>-->
        <producerConfig>bootstrap.servers=172.22.96.30:6667</producerConfig>
        <!-- don't wait for a broker to ack the reception of a batch.  -->
        <producerConfig>acks=0</producerConfig>
        <!-- wait up to 1000ms and collect log messages before sending them as a batch -->
        <producerConfig>linger.ms=1000</producerConfig>
        <!-- even if the producer buffer runs full, do not block the application but start to drop messages -->
        <producerConfig>max.block.ms=10000</producerConfig>
        <!-- define a client-id that you use to identify yourself against the kafka broker -->
        <producerConfig>client.id=byf-${HOSTNAME}-${CONTEXT_NAME}-logback-relaxed</producerConfig>

        <!-- there is no fallback <appender-ref>. If this appender cannot deliver, it will drop its messages. -->
    </appender>
    <!-- Logger 根目录 -->
    <root level="WARN">
        <appender-ref ref="STDOUT" />
<!--        <appender-ref ref="kafkaAppender" />-->
    </root>
</configuration>